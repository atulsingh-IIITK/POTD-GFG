In a stock market, there is a product with its infinite stocks. The stock prices are given for N days, where price[i] denotes the price of the stock on the ith day.
There is a rule that a customer can buy at most i stock on the ith day.
If the customer has an amount of k amount of money initially. The task is to find out the maximum number of stocks a customer can buy. 

Example 1:

Input:
price = [10,7,19]
k = 45
Output: 
4
Explanation: 
A customer purchases 1 stock on day 1, 2 stocks on day 2 and 1 stock on day 3 for 10, 7 * 2 = 14 and 19 respectively. Hence, total amount is 10 + 14 + 19 = 43 and number of stocks purchased is 4.


//CODE

 int buyMaximumProducts(int n, int k, int price[]){
        
        vector<pair<int,int>> arr;
        
        for(int i=0;i<n;i++) {
            arr.push_back({price[i],i+1});
        }
        
        sort(arr.begin(),arr.end());
        
        int ans=0;
        
        for(auto it:arr) {
            int total=it.first*it.second;
            if(k>=total) {
                ans+=it.second;
                k-=total;
            }
            else {
                ans+=(k/it.first);
                break;
            }
        }
        return ans;
    }
